#!/usr/bin/env python3
"""
Script de test rapide du syst√®me de plantes
"""

import json
from plants_database import plants_db
from plants_data_collector import PlantDataCollector

def test_database():
    """Test de la base de donn√©es"""
    print("=== TEST BASE DE DONN√âES ===")

    # Test de sauvegarde
    test_plant = {
        'scientific_name': 'Test Plant',
        'common_names': ['Plante Test'],
        'family': 'Testaceae',
        'description': 'Une plante de test',
        'categories': [{'category': 'test', 'subcategory': 'unit'}],
        'care_instructions': {'watering': 'weekly'},
        'weather_data': {'temperature_min': 10, 'temperature_max': 30}
    }

    try:
        plant_id = plants_db.save_plant(test_plant)
        print(f"‚úÖ Sauvegarde r√©ussie - ID: {plant_id}")

        # Test de r√©cup√©ration
        retrieved = plants_db.get_plant('Test Plant')
        if retrieved:
            print(f"‚úÖ R√©cup√©ration r√©ussie: {retrieved['scientific_name']}")
        else:
            print("‚ùå √âchec de r√©cup√©ration")

        # Test de recherche
        results = plants_db.search_plants('test')
        print(f"‚úÖ Recherche trouv√©e: {len(results)} r√©sultats")

        # Statistiques
        stats = plants_db.get_stats()
        print(f"‚úÖ Statistiques: {stats['total_plants']} plantes")

    except Exception as e:
        print(f"‚ùå Erreur base de donn√©es: {e}")

def test_collector():
    """Test du collecteur de donn√©es"""
    print("\n=== TEST COLLECTEUR ===")

    collector = PlantDataCollector()

    test_plants = ["Rosa rugosa", "Quercus robur"]

    for plant in test_plants:
        try:
            print(f"\nüå± Test de {plant}:")
            data = collector.collect_comprehensive_plant_data(plant)

            if data:
                print(f"‚úÖ Donn√©es collect√©es: {len(data.get('sources', {}))} sources")
                print(f"   - Nom scientifique: {data.get('scientific_name')}")
                print(f"   - Noms communs: {data.get('common_names', [])}")
                print(f"   - Famille: {data.get('family', 'N/A')}")
                print(f"   - Cat√©gories: {len(data.get('categories', []))}")

                # Sauvegarde en base
                plant_id = plants_db.save_plant(data)
                print(f"‚úÖ Sauvegard√© en base - ID: {plant_id}")
            else:
                print("‚ùå Aucune donn√©e collect√©e")

        except Exception as e:
            print(f"‚ùå Erreur pour {plant}: {e}")

def test_integration():
    """Test de l'int√©gration compl√®te"""
    print("\n=== TEST INT√âGRATION ===")

    from plants_integration import PlantsIntegrationSystem

    integration = PlantsIntegrationSystem()

    # Test avec une petite liste
    test_plants = ["Tulipa gesneriana", "Mentha piperita"]

    try:
        stats = integration.process_plant_list(test_plants, batch_size=2)

        print("‚úÖ Int√©gration r√©ussie:")
        print(f"   - Trait√©: {stats['total_processed']}")
        print(f"   - R√©ussi: {stats['successful_collects']}")
        print(f"   - Sauvegard√©: {stats['saved_to_db']}")

        # V√©rification en base
        final_stats = plants_db.get_stats()
        print(f"‚úÖ Base finale: {final_stats['total_plants']} plantes")

    except Exception as e:
        print(f"‚ùå Erreur int√©gration: {e}")

def show_sample_data():
    """Affiche un √©chantillon des donn√©es"""
    print("\n=== √âCHANTILLON DE DONN√âES ===")

    try:
        # Recherche par cat√©gorie
        categories = ['fleurs', 'arbres', 'legumes']

        for category in categories:
            plants = plants_db.get_plants_by_category(category, limit=1)
            if plants:
                plant = plants[0]
                print(f"\nüìã {category.upper()}:")
                print(f"   Nom: {plant.get('scientific_name')}")
                print(f"   Commun: {plant.get('common_names', ['N/A'])[0]}")
                print(f"   Description: {plant.get('description', 'N/A')[:100]}...")

    except Exception as e:
        print(f"‚ùå Erreur √©chantillon: {e}")

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE DES TESTS DU SYST√àME DE PLANTES")
    print("=" * 50)

    try:
        # Test de la base de donn√©es
        test_database()

        # Test du collecteur
        test_collector()

        # Test d'int√©gration
        test_integration()

        # Affichage d'√©chantillon
        show_sample_data()

        print("\n" + "=" * 50)
        print("‚úÖ TESTS TERMIN√âS")

        # Statistiques finales
        final_stats = plants_db.get_stats()
        print("\nüìä STATISTIQUES FINALES:")
        for key, value in final_stats.items():
            if isinstance(value, int) and value > 0:
                print(f"   {key}: {value}")

    except Exception as e:
        print(f"\n‚ùå ERREUR FATALE: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
